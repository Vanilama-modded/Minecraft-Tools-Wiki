let toolsData = [];\nlet isSearching = false;\n\n// Global UI elements\nlet aiSearchInput, searchSuggestions, suggestionsList, searchIcon, loadingSpinner;\n\n// Helper function to manage loading state UI\nfunction setLoading(loading) {\n    isSearching = loading;\n    if (loading) {\n        if (searchIcon) searchIcon.classList.add('hidden');\n        if (loadingSpinner) loadingSpinner.classList.remove('hidden');\n    } else {\n        if (searchIcon) searchIcon.classList.remove('hidden');\n        if (loadingSpinner) loadingSpinner.classList.add('hidden');\n    }\n}\n\n// Load tools from JSON file\nasync function loadToolsData() {\n    try {\n        const response = await fetch('tools.json');\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        toolsData = await response.json();\n        populateTable();\n    } catch (error) {\n        console.error('Error loading tools data:', error);\n        await loadFallbackData();\n    }\n}\n\n// Fallback data in case JSON loading fails\nasync function loadFallbackData() {\n    toolsData = [];\n    const tableBody = document.getElementById('tableBody');\n    const mobileCards = document.getElementById('mobileCards');\n    \n    const errorMessage = `\n        <i class=\